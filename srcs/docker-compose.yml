networks:
  app-network:
    driver: bridge

services:
  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_HOST_AUTH_METHOD=password
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U myuser"]
    #   interval: 5s
    #   retries: 10

  fastapi:
    build: ./backend
    container_name: backend
    restart: always
    ports:
      - "8000:8000"
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - postgres
      # postgres:
      #   condition: service_healthy
    volumes:
      - ./backend/app:/app/
    environment:
      DATABASE_URL: "postgresql://myuser:mypassword@postgres:5432/mydb" 
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules 
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://backend:8000
    depends_on:
      - fastapi 
    env_file:
      - .env
    networks:
      - app-network

  nginx:
    build: ./nginx
    container_name: nginx
    restart: always
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - fastapi
      - frontend
    networks:
      - app-network
    volumes:
      - ./frontend/build:/usr/share/nginx/html
