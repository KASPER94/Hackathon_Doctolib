networks:
  app-network:
    driver: bridge

services:
  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - app-network
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      retries: 10
      timeout: 3s

  fastapi:
    build: ./backend
    container_name: backend
    restart: always
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://user:password@db:5432/mydb" 
    networks:
      - app-network

  react:
    build: ./frontend
    container_name: frontend
    restart: always
    ports: 
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network

  nginx:
    build: ./nginx
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - fastapi
      - react
    networks:
      - app-network
    volumes:
      - ./frontend/build:/usr/share/nginx/html
